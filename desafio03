#Desafio - Modelando o Sistema Bancário em POO com Python
import textwrap
from abc import ABC, abstractclassmethod, abstractproperty
from datetime import datetime

class Cliente:
    def __init__(self, nome, nascimento, cpf, endereco):
        self.nome = nome
        self.nascimento = nascimento
        self.cpf = cpf
        self.endereco = endereco
        self.contas = []

    def adicionar_conta(self, conta):
        self.contas.append(conta)

class Conta:
    def __init__(self, numero, cliente, agencia="0001"):
        self._saldo = 0
        self._numero = numero
        self._agencia = agencia
        self._cliente = cliente
        self._historico = Historico()

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia

    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico

    def sacar(self, valor, limite, limite_saques):
        numero_saques = len(
            [t for t in self.historico.transacoes if t["tipo"] == "Saque"]
        )
        if valor > self._saldo:
            print("\nOperação Falhou: Saldo Insuficiente")
            return False
        if valor > limite:
            print("\nOperação Falhou: Valor do Saque excede o Limite")
            return False
        if numero_saques >= limite_saques:
            print("\nOperação Falhou: Máximo de Saques Atingido")
            return False
        if valor <= 0:
            print("\nOperação Falhou: Valor Informado é Inválido")
            return False

        self._saldo -= valor
        self._historico.adicionar_transacao(Saque(valor))
        print("\n--- Saque Realizado com Sucesso! ---")
        return True

    def depositar(self, valor):
        if valor <= 0:
            print("\nOperação Falhou: Valor Inválido para Depósito")
            return False

        self._saldo += valor
        self._historico.adicionar_transacao(Deposito(valor))
        print("\n--- Depósito Realizado com Sucesso! ---")
        return True

class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite=500, limite_saques=3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saques = limite_saques

class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        self._transacoes.append(
            {
                "tipo": transacao.__class__.__name__,
                "valor": transacao.valor,
                "data": datetime.now().strftime("%d-%m-%Y %H:%M:%S"),
            }
        )

    def mostrar(self, saldo):
        print("\n============ EXTRATO ============")
        if not self._transacoes:
            print("Não houve movimentações.")
        else:
            for t in self._transacoes:
                print(f"{t['data']} - {t['tipo']}: R$ {t['valor']:.2f}")
        print(f"\nSaldo: R$ {saldo:.2f}")
        print()

class Transacao(ABC):
    @property
    @abstractproperty
    def valor(self):
        pass

    @abstractclassmethod
    def registrar(self, conta):
        pass

class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        conta.sacar(self.valor, conta.limite, conta.limite_saques)

class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        conta.depositar(self.valor)

def menu():
    menu = """\n
    ========== MENU ==========
    [1]\tDepositar
    [2]\tSacar
    [3]\tExtrato
    [4]\tNova Conta
    [5]\tListar Contas
    [6]\tNovo Usuário
    [7]\tSair
    ==========================
    """
    return input(textwrap.dedent(menu))

def filtrar_usuario(cpf, usuarios):
    for usuario in usuarios:
        if usuario.cpf == cpf:
            return usuario
    return None

def criar_usuario(usuarios):
    cpf = input("Por favor, informe o seu CPF: ")
    if filtrar_usuario(cpf, usuarios):
        print("Aviso: Este CPF já está cadastrado.")
        return None

    nome = input("Nome Completo: ")
    nascimento = input("Data de Nascimento (dd-mm-aaaa): ")
    endereco = input("Endereço: ")

    usuario = Cliente(nome, nascimento, cpf, endereco)
    usuarios.append(usuario)
    print("--- Cadastro realizado com sucesso! ---")
    return usuario

def criar_conta(agencia, numero_conta, usuarios):
    cpf = input("Informe o CPF do usuário: ")
    usuario = filtrar_usuario(cpf, usuarios)

    if usuario:
        conta = ContaCorrente(numero_conta, usuario)
        usuario.adicionar_conta(conta)
        print("\n--- Conta criada com sucesso! ---")
        return conta
    else:
        print("\nErro: Usuário não encontrado! Criação de conta encerrado.")
        return None

def listar_contas(contas):
    if not contas:
        print("Nenhuma conta cadastrada.")
        return

    print("\n====== LISTA DE CONTAS ======")
    for conta in contas:
        linha = f"""\
Agência:\t{conta.agencia}
C/C:\t\t{conta.numero}
Titular:\t{conta.cliente.nome}
"""
        print("-" * 50)
        print(textwrap.dedent(linha))
    print("-" * 50)

def encontrar_conta(numero, contas):
    for conta in contas:
        if str(conta.numero) == str(numero):
            return conta
    return None

def main():
    AGENCIA = "0001"

    usuarios = []
    contas = []

    while True:
        opcao = menu()

        if opcao == "1":
            numero = input("Número da conta para depósito: ")
            conta = encontrar_conta(numero, contas)

            if not conta:
                print("Conta não encontrada.")
                continue
            try:
                valor = float(input("Valor para depósito: "))
            except ValueError:
                print("Valor inválido.")
                continue

            deposito = Deposito(valor)
            deposito.registrar(conta)

        elif opcao == "2":
            numero = input("Número da conta para saque: ")
            conta = encontrar_conta(numero, contas)

            if not conta:
                print("Conta não encontrada.")
                continue
            try:
                valor = float(input("Valor para saque: "))
            except ValueError:
                print("Valor inválido.")
                continue

            saque = Saque(valor)
            saque.registrar(conta)

        elif opcao == "3":
            numero = input("Número da conta para extrato: ")
            conta = encontrar_conta(numero, contas)

            if not conta:
                print("Conta não encontrada.")
                continue

            conta.historico.mostrar(conta.saldo)

        elif opcao == "4":
            numero_conta = len(contas) + 1
            conta = criar_conta(AGENCIA, numero_conta, usuarios)
            if conta:
                contas.append(conta)

        elif opcao == "5":
            listar_contas(contas)

        elif opcao == "6":
            criar_usuario(usuarios)

        elif opcao == "7":
            print("\nSaindo do sistema...")
            break

        else:
            print("Operação inválida: Por favor selecione novamente a operação desejada.")

if __name__ == "__main__":
    main()
